// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String?
  username      String?         @unique
  password      String?
  role          String         @default("reporter")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  comments      Comment[]
  issues        Issue[]
  notifications Notification[]
}

model Issue {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  category    String?
  assigneeId  Int?
  file        String?
  fileType    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      String    @default("TODO")
  priority    String    @default("MEDIUM")
  comments    Comment[]
  assignee    User?     @relation(fields: [assigneeId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String?
  file      String?
  fileType  String?
  authorId  Int
  issueId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model Notification {
  id          Int      @id @default(autoincrement())
  message     String
  recipientId Int
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  recipient   User     @relation(fields: [recipientId], references: [id], onDelete: Cascade)
}



